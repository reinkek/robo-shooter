/**************************************************************************
***    Copyright (c) 2014 S. Mohammad Khansari, Stnford Robotics,       ***
***                      Stanford University, USA                       ***
***************************************************************************
*
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Stanford University nor the name of the author may
#       be used to endorse or promote products derived from this software without
#       specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY MOHAMMAD KHANSARI ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL MOHAMMAD KHANSARI BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
* To get latest upadate of the software please visit:
*                          http://cs.stanford.edu/people/khansari
*
* Please send your feedbacks or questions to:
*                           khansari_at_cs.stanford.edu
***************************************************************************/

#include "signal.h"
//#include <QThread>
#include "IIWARobot.h"
#include <OptiTrack.h>
#include <Eigen/Geometry>

//scl lib
//#include <scl/DataTypes.hpp>
//#include <scl/data_structs/SGcModel.hpp>
#include <scl/dynamics/scl/CDynamicsScl.hpp>
#include <scl/dynamics/tao/CDynamicsTao.hpp>
#include <scl/parser/sclparser/CParserScl.hpp>
#include <scl/graphics/chai/CGraphicsChai.hpp>
#include <scl/graphics/chai/ChaiGlutHandlers.hpp>
//#include <scl/util/DatabaseUtils.hpp>
//global database of everything
//#include <scl/Singletons.hpp>
//#include <scl/util/DatabaseUtils.hpp>
//#include <scl/util/HelperFunctions.hpp>
//control
//#include <scl/robot/DbRegisterFunctions.hpp>
//#include <scl/control/task/CControllerMultiTask.hpp>
//#include <scl/control/task/tasks/data_structs/STaskOpPos.hpp>
//Standard includes (for printing and multi-threading)
#include <iostream>
#include <omp.h>
//Freeglut windowing environment
#include <GL/freeglut.h>
//Ipopt
#include "IpIpoptApplication.hpp"
#include "IpBlas.hpp"
#include "Trajectory_nlp.hpp"

using namespace std;

//globals - bad style
bool b_useCalibration = true;
double currentPosition[3];
double **currentRotationMatrix;
OptiTrack *objects;
int nbObjects;
scl::SRobotIO robotIO;

// optimizer globals
Ipopt::SmartPtr<Trajectory_NLP>  aiming_nlp;
Ipopt::SmartPtr<IpoptApplication> solver_app = new IpoptApplication();


class IIWAController: public IIWARobot{
public:
    void Controller(const IIWA::IIWAMsg &currentState, IIWA::IIWAMsg &desiredState);
    bool optimize;
};

void IIWAController::Controller(const IIWA::IIWAMsg &currentState, IIWA::IIWAMsg &desiredState){
    for (int i=0; i<nbObjects; i++)
    {
        if (objects[i].IsEnabled()){
            //reading new values, if there is any
            objects[i].Update();

            // Getting the object position
            objects[i].GetPosition(currentPosition, b_useCalibration);

            // Getting the object orientation
            objects[i].GetRotationMatrix(currentRotationMatrix, b_useCalibration);

            //printing
/*            std::cout << "Object name: " << objects[i].GetObjectName() << std::endl;
            std::cout << "Position:    [" << currentPosition[0] << "," << currentPosition[1] << "," << currentPosition[2] << "]" << std::endl;

            std::cout << "Orientation: [" << currentRotationMatrix[0][0] << "," << currentRotationMatrix[0][1] << "," << currentRotationMatrix[0][2] << std::endl;
            std::cout << "              " << currentRotationMatrix[1][0] << "," << currentRotationMatrix[1][1] << "," << currentRotationMatrix[1][2] << std::endl;
            std::cout << "              " << currentRotationMatrix[2][0] << "," << currentRotationMatrix[2][1] << "," << currentRotationMatrix[2][2] << "]" << std::endl;*/
        }
    }

    if (optimize){
        aiming_nlp->set_q_info(q,dq)
        aiming_nlp->set_starting_point(currentState.cartPosition, bearing, true, x, true, z_L, z_U, true, lambda);
        
    }

    Eigen::Matrix3f Ree;
    for(int i=0;i<3;i++){
      for(int j=0;j<3;j++){
        Ree(i,j) = currentState.cartOrientation[i*3+j];
      }
    }      
    Eigen::Vector3f eePos(currentState.cartPosition[0],currentState.cartPosition[1],currentState.cartPosition[2]);


    Eigen::Vector3f objPos(currentPosition[1]*1000+975,currentPosition[0]*-1000-1047,currentPosition[2]*1000+100);
    Eigen::Vector3f desPos = objPos + Eigen::Vector3f(-500,0,470);
    Eigen::Vector3f curPos = Ree*Eigen::Vector3f(-13.6,49.1,81) + eePos;
    Eigen::Vector3f err = objPos-curPos;
    float distToTgt = err.norm();
    err.normalize();
    Eigen::Vector3f aimAxis(0,-1,0);
    Eigen::Quaternion<float> rotQuat;
    rotQuat.setFromTwoVectors(aimAxis,err);
    rotQuat.normalize();
    Eigen::Matrix3f R = rotQuat.toRotationMatrix();
    desPos = err*(distToTgt-500)+curPos;
    //cout << "TEST" << endl;
    //cout << objPos[0] << " " << objPos[1] << " " << objPos[2] << endl;
    //write your controller here
    //cout << currentState.cartPosition[0] << " "
    //     << currentState.cartPosition[1] << " "
    //     << currentState.cartPosition[2] << endl;

    //write your desired command in the variable desiredState.
    //You do not need to fill all the variables, just set the ones that you want to change now.
    //Important: Don't FORGET to resize them first.

    //You need to set this flag to define the control type
    desiredState.isJointControl = false;

    desiredState.cartPosition.resize(3);
    desiredState.cartOrientation.resize(9);

    if(abs(desPos[0])<1000 && abs(desPos[1])<1000 && desPos[2]<1000 && desPos[2] > 95 ){
        //cout << "following optitrack" << endl;
        //cout<< desPos << endl;
        for(int i=0;i<3;i++){
          desiredState.cartPosition[i] = desPos[i];
          for(int j=0;j<3;j++){
            desiredState.cartOrientation[i*3+j] = R(i,j);
          }
        }
    }else{
        //cout << "float ctrl" << endl;
        desiredState.cartPosition = currentState.cartPosition;
        desiredState.cartOrientation.resize(9);
        desiredState.cartOrientation = currentState.cartOrientation;
    }
    //desiredState.cartPosition[0] = 600.0;
    //desiredState.cartPosition[1] = 0.0;
    //desiredState.cartPosition[2] = 500.0;
    

    /*
    desiredState.isJointControl = true;
    desiredState.jointAngles.resize(7);
    desiredState.jointAngles = currentState.jointAngles;
    for(int i = 0;i<7;i++){
        //desiredState.jointAngles[i] = 0;
    }*/
    for(int i = 0;i<7;i++){
      if(i==3){
        robotIO.sensors_.q_[i] = -currentState.jointAngles[i];
      }else{
        robotIO.sensors_.q_[i] = currentState.jointAngles[i];
      }
    }
}


void sighandle(int signal)
{
    exit(1);
}

int main(int argc, char** argv)
{
    ros::init(argc, argv, "iiwa_core");

    IIWAController myIIWAController;

    std::string vrpn_server_ip = "172.24.68.48:3883"; //you should not change this ip address
    std::cout << "vrpn_server_ip:" << vrpn_server_ip << std::endl;

    //The name of the objects that you want to track
    std::string target_name[] = {"quad"};

    //computing the number of strings in the target_name
    nbObjects = sizeof( target_name ) / sizeof( std::string );

    //initializing the optitrack object(s)
    objects = new OptiTrack[nbObjects];
    for (int i=0; i<nbObjects; i++){
        objects[i].Init(vrpn_server_ip, target_name[i]);

        //if you want to use your own coordinate system T, you could load it here
        //T is a homogeneous matrix from OptiTrack coordinate system to your coordinate system
        objects[i].loadCalibrationMatrix("/home/student/group4/cs225a/OptiTrack/VisionCalib.txt");
    }

    currentRotationMatrix = new double*[3];
    for (int i=0; i<3; i++)
        currentRotationMatrix[i] = new double[3];

    signal(SIGINT, sighandle);
    signal(SIGQUIT, sighandle);
    
    //Optimizer initialization:
    //initializ parameters
    Index N = 7;
    Index m = 4;
    Number v = 10;
    const Number alph = 0.5;
    const Number beta = 0.3;
    const Number gam = 0.1;

    const Number g = -9.81;

    Number A [9] = {1,0,0,
                    0,1,0,
                    0,0,1};

    Number B [9] = {1,0,0,
                    0,1,0,
                    0,0,1};
    Number robot_pos [3] = {0.25, 0.25, 0.25};
    Number robot_bearing [3] = {std::sqrt(1/2.0), std::sqrt(1/2.0), 0};
    Number q [3] = {1.25, 1.25, 0.5};
    Number dq [3] = {-0.05, -0.05, 0.01};
    Number x0 [7] = {0.25, 0.25, 0.25, std::sqrt(1/2.0), std::sqrt(1/2.0), 0, 0.5};
  
    Number x_u [7] = {.333, .666, std::sqrt(1 - 0.333*0.333 - 0.666*0.666), INF, INF, INF, INF};
    Number x_l [7] = {-.333, -.666, 0, -INF, -INF, -INF, 0};
    
    Number* z_L = {0,0,0,0,0,0,0};
    Number* z_U = {0,0,0,0,0,0,0};
    Number* lambda = {0,0,0,0};

    // create a new instance of the nlp
    //  (use a SmartPtr, not raw)
    aiming_nlp = new Trajectory_NLP(N, g, v, alph, beta, gam);
    aimingnlp->set_x_bounds_info(N, x_l, x_u);

    aimingnlp->set_starting_point(N, robot_pos, robot_bearing, true, x0, false, z_L, z_U, m, false, lambda);
    aimingnlp->set_q_info(q, dq);
    

    //SCL STUFF
    scl::CParserScl parser;
    scl::SRobotParsed robot_properties;
    
    //parsed the robot
    const std::string fname ( "/home/student/group4/cs225a/catkin_ws/src/IIWA/src/iiwaCfg.xml" );
    parser.readRobotFromFile ( fname,"","iiwaBot",robot_properties );
    
    //sensors, input/outputs
    robotIO.init ( robot_properties.name_, robot_properties.dof_ );
    
    //set initial sensor values
    Eigen::VectorXd q_ready ( robot_properties.dof_ );
    for ( unsigned int i=0; i<robot_properties.dof_; ++i ) {
      scl::SRigidBody* rigid_body = robot_properties.rb_tree_.at ( i );
      q_ready[i] = rigid_body->joint_default_pos_;
    }
    robotIO.sensors_.q_=q_ready;
    
    //create physics engine
    scl::CDynamicsTao world_dynamics;
    world_dynamics.init ( robot_properties );
    
    //dynamic robot
    scl::SGcModel robot_model;
    robot_model.init ( robot_properties );
    
    //our control dynamics engine
    scl::CDynamicsScl robot_dynamics;
    robot_dynamics.init ( robot_properties );
    
    //graphics
    glutInit ( &argc, argv );
    scl::SGraphicsParsed graphics_properties;
    parser.readGraphicsFromFile ( "/home/student/group4/cs225a/catkin_ws/src/IIWA/src/iiwaCfg.xml", "iiwaBotStdView", graphics_properties );
    scl::CGraphicsChai graphics;
    graphics.initGraphics ( &graphics_properties );
    graphics.addRobotToRender ( &robot_properties, &robotIO );
    scl_chai_glut_interface::initializeGlutForChai ( &graphics_properties, &graphics );
    
    //create two threads
    omp_set_num_threads ( 2 );
    int thread_id;
    
    #pragma omp parallel private(thread_id)
    {
      thread_id = omp_get_thread_num();
      
      if ( thread_id==1 ) {
        //control loop is here
        while(true)
        {
            myIIWAController.RobotUpdate();
        }
      } else { //Read the rio data structure and updated rendered robot..
        while ( true == scl_chai_glut_interface::CChaiGlobals::getData()->chai_glut_running ) {
          glutMainLoopEvent();
          const timespec ts = {0, 15000000};/*15ms*/
          nanosleep ( &ts,NULL );
        }
      }
    }

    return 0;
}


